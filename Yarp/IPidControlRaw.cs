/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class IPidControlRaw : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal IPidControlRaw(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(IPidControlRaw obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~IPidControlRaw()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_IPidControlRaw(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public virtual bool setPidRaw(int j, SWIGTYPE_p_Pid pid)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_setPidRaw(swigCPtr, j, SWIGTYPE_p_Pid.getCPtr(pid));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public virtual bool setPidsRaw(SWIGTYPE_p_Pid pids)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_setPidsRaw(swigCPtr, SWIGTYPE_p_Pid.getCPtr(pids));
			return ret;
		}

		public virtual bool setReferenceRaw(int j, double arg1)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_setReferenceRaw(swigCPtr, j, arg1);
			return ret;
		}

		public virtual bool setReferencesRaw(SWIGTYPE_p_double refs)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_setReferencesRaw(swigCPtr, SWIGTYPE_p_double.getCPtr(refs));
			return ret;
		}

		public virtual bool setErrorLimitRaw(int j, double limit)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_setErrorLimitRaw(swigCPtr, j, limit);
			return ret;
		}

		public virtual bool setErrorLimitsRaw(SWIGTYPE_p_double limits)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_setErrorLimitsRaw(swigCPtr, SWIGTYPE_p_double.getCPtr(limits));
			return ret;
		}

		public virtual bool getErrorRaw(int j, SWIGTYPE_p_double err)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getErrorRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(err));
			return ret;
		}

		public virtual bool getErrorsRaw(SWIGTYPE_p_double errs)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getErrorsRaw(swigCPtr, SWIGTYPE_p_double.getCPtr(errs));
			return ret;
		}

		public virtual bool getOutputRaw(int j, SWIGTYPE_p_double arg1)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getOutputRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(arg1));
			return ret;
		}

		public virtual bool getOutputsRaw(SWIGTYPE_p_double outs)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getOutputsRaw(swigCPtr, SWIGTYPE_p_double.getCPtr(outs));
			return ret;
		}

		public virtual bool getPidRaw(int j, SWIGTYPE_p_Pid pid)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getPidRaw(swigCPtr, j, SWIGTYPE_p_Pid.getCPtr(pid));
			return ret;
		}

		public virtual bool getPidsRaw(SWIGTYPE_p_Pid pids)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getPidsRaw(swigCPtr, SWIGTYPE_p_Pid.getCPtr(pids));
			return ret;
		}

		public virtual bool getReferenceRaw(int j, SWIGTYPE_p_double arg1)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getReferenceRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(arg1));
			return ret;
		}

		public virtual bool getReferencesRaw(SWIGTYPE_p_double refs)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getReferencesRaw(swigCPtr, SWIGTYPE_p_double.getCPtr(refs));
			return ret;
		}

		public virtual bool getErrorLimitRaw(int j, SWIGTYPE_p_double limit)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getErrorLimitRaw(swigCPtr, j, SWIGTYPE_p_double.getCPtr(limit));
			return ret;
		}

		public virtual bool getErrorLimitsRaw(SWIGTYPE_p_double limits)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_getErrorLimitsRaw(swigCPtr, SWIGTYPE_p_double.getCPtr(limits));
			return ret;
		}

		public virtual bool resetPidRaw(int j)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_resetPidRaw(swigCPtr, j);
			return ret;
		}

		public virtual bool disablePidRaw(int j)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_disablePidRaw(swigCPtr, j);
			return ret;
		}

		public virtual bool enablePidRaw(int j)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_enablePidRaw(swigCPtr, j);
			return ret;
		}

		public virtual bool setOffsetRaw(int j, double v)
		{
			bool ret = yarpPINVOKE.IPidControlRaw_setOffsetRaw(swigCPtr, j, v);
			return ret;
		}

	}
}