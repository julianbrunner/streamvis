/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class ConnectionReader : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal ConnectionReader(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(ConnectionReader obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~ConnectionReader()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_ConnectionReader(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public virtual bool expectBlock(string data, int len)
		{
			bool ret = yarpPINVOKE.ConnectionReader_expectBlock(swigCPtr, data, len);
			return ret;
		}

		public virtual ConstString expectText(int terminatingChar)
		{
			ConstString ret = new ConstString(yarpPINVOKE.ConnectionReader_expectText__SWIG_0(swigCPtr, terminatingChar), true);
			return ret;
		}

		public virtual ConstString expectText()
		{
			ConstString ret = new ConstString(yarpPINVOKE.ConnectionReader_expectText__SWIG_1(swigCPtr), true);
			return ret;
		}

		public virtual int expectInt()
		{
			int ret = yarpPINVOKE.ConnectionReader_expectInt(swigCPtr);
			return ret;
		}

		public virtual double expectDouble()
		{
			double ret = yarpPINVOKE.ConnectionReader_expectDouble(swigCPtr);
			return ret;
		}

		public virtual bool isTextMode()
		{
			bool ret = yarpPINVOKE.ConnectionReader_isTextMode(swigCPtr);
			return ret;
		}

		public virtual bool convertTextMode()
		{
			bool ret = yarpPINVOKE.ConnectionReader_convertTextMode(swigCPtr);
			return ret;
		}

		public virtual int getSize()
		{
			int ret = yarpPINVOKE.ConnectionReader_getSize(swigCPtr);
			return ret;
		}

		public virtual ConnectionWriter getWriter()
		{
			IntPtr cPtr = yarpPINVOKE.ConnectionReader_getWriter(swigCPtr);
			ConnectionWriter ret = (cPtr == IntPtr.Zero) ? null : new ConnectionWriter(cPtr, false);
			return ret;
		}

		public virtual Portable getReference()
		{
			IntPtr cPtr = yarpPINVOKE.ConnectionReader_getReference(swigCPtr);
			Portable ret = (cPtr == IntPtr.Zero) ? null : new Portable(cPtr, false);
			return ret;
		}

		public virtual Contact getRemoteContact()
		{
			Contact ret = new Contact(yarpPINVOKE.ConnectionReader_getRemoteContact(swigCPtr), true);
			return ret;
		}

		public virtual Contact getLocalContact()
		{
			Contact ret = new Contact(yarpPINVOKE.ConnectionReader_getLocalContact(swigCPtr), true);
			return ret;
		}

		public virtual bool isValid()
		{
			bool ret = yarpPINVOKE.ConnectionReader_isValid(swigCPtr);
			return ret;
		}

		public virtual bool isActive()
		{
			bool ret = yarpPINVOKE.ConnectionReader_isActive(swigCPtr);
			return ret;
		}

		public virtual bool isError()
		{
			bool ret = yarpPINVOKE.ConnectionReader_isError(swigCPtr);
			return ret;
		}

	}
}