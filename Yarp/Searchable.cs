/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class Searchable : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal Searchable(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(Searchable obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~Searchable()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_Searchable(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public new bool check(string key)
		{
			bool ret = yarpPINVOKE.Searchable_check__SWIG_0(swigCPtr, key);
			return ret;
		}

		public new bool check(string key, string comment)
		{
			bool ret = yarpPINVOKE.Searchable_check__SWIG_1(swigCPtr, key, comment);
			return ret;
		}

		public new Value find(string key)
		{
			Value ret = new Value(yarpPINVOKE.Searchable_find(swigCPtr, key), false);
			return ret;
		}

		public new Bottle findGroup(string key)
		{
			Bottle ret = new Bottle(yarpPINVOKE.Searchable_findGroup__SWIG_0(swigCPtr, key), false);
			return ret;
		}

		public new Bottle findGroup(string key, string comment)
		{
			Bottle ret = new Bottle(yarpPINVOKE.Searchable_findGroup__SWIG_1(swigCPtr, key, comment), false);
			return ret;
		}

		public new Value check(string key, Value fallback, string comment)
		{
			Value ret = new Value(yarpPINVOKE.Searchable_check__SWIG_2(swigCPtr, key, Value.getCPtr(fallback), comment), true);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public new Value check(string key, Value fallback)
		{
			Value ret = new Value(yarpPINVOKE.Searchable_check__SWIG_3(swigCPtr, key, Value.getCPtr(fallback)), true);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public virtual bool isNull()
		{
			bool ret = yarpPINVOKE.Searchable_isNull(swigCPtr);
			return ret;
		}

		public new ConstString toString_c()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Searchable_toString_c(swigCPtr), true);
			return ret;
		}

		public virtual void setMonitor(SearchMonitor monitor, string context)
		{
			yarpPINVOKE.Searchable_setMonitor__SWIG_0(swigCPtr, SearchMonitor.getCPtr(monitor), context);
		}

		public virtual void setMonitor(SearchMonitor monitor)
		{
			yarpPINVOKE.Searchable_setMonitor__SWIG_1(swigCPtr, SearchMonitor.getCPtr(monitor));
		}

		public virtual SearchMonitor getMonitor()
		{
			IntPtr cPtr = yarpPINVOKE.Searchable_getMonitor(swigCPtr);
			SearchMonitor ret = (cPtr == IntPtr.Zero) ? null : new SearchMonitor(cPtr, false);
			return ret;
		}

		public virtual ConstString getContext()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Searchable_getContext(swigCPtr), true);
			return ret;
		}

		public virtual void reportToMonitor(SearchReport report)
		{
			yarpPINVOKE.Searchable_reportToMonitor(swigCPtr, SearchReport.getCPtr(report));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

	}
}