/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class Sound : Portable
	{
		private HandleRef swigCPtr;

		internal Sound(IntPtr cPtr, bool cMemoryOwn)
			: base(yarpPINVOKE.SoundUpcast(cPtr), cMemoryOwn)
		{
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(Sound obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~Sound()
		{
			Dispose();
		}

		public override void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_Sound(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
				base.Dispose();
			}
		}

		public Sound(int bytesPerSample)
			: this(yarpPINVOKE.new_Sound__SWIG_0(bytesPerSample), true)
		{
		}

		public Sound()
			: this(yarpPINVOKE.new_Sound__SWIG_1(), true)
		{
		}

		public Sound(Sound alt)
			: this(yarpPINVOKE.new_Sound__SWIG_2(Sound.getCPtr(alt)), true)
		{
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public void resize(int samples, int channels)
		{
			yarpPINVOKE.Sound_resize__SWIG_0(swigCPtr, samples, channels);
		}

		public void resize(int samples)
		{
			yarpPINVOKE.Sound_resize__SWIG_1(swigCPtr, samples);
		}

		public int get(int sample, int channel)
		{
			int ret = yarpPINVOKE.Sound_get__SWIG_0(swigCPtr, sample, channel);
			return ret;
		}

		public int get(int sample)
		{
			int ret = yarpPINVOKE.Sound_get__SWIG_1(swigCPtr, sample);
			return ret;
		}

		public void set(int value, int sample, int channel)
		{
			yarpPINVOKE.Sound_set__SWIG_0(swigCPtr, value, sample, channel);
		}

		public void set(int value, int sample)
		{
			yarpPINVOKE.Sound_set__SWIG_1(swigCPtr, value, sample);
		}

		public int getSafe(int sample, int channel)
		{
			int ret = yarpPINVOKE.Sound_getSafe__SWIG_0(swigCPtr, sample, channel);
			return ret;
		}

		public int getSafe(int sample)
		{
			int ret = yarpPINVOKE.Sound_getSafe__SWIG_1(swigCPtr, sample);
			return ret;
		}

		public void setSafe(int value, int sample, int channel)
		{
			yarpPINVOKE.Sound_setSafe__SWIG_0(swigCPtr, value, sample, channel);
		}

		public void setSafe(int value, int sample)
		{
			yarpPINVOKE.Sound_setSafe__SWIG_1(swigCPtr, value, sample);
		}

		public bool isSample(int sample, int channel)
		{
			bool ret = yarpPINVOKE.Sound_isSample__SWIG_0(swigCPtr, sample, channel);
			return ret;
		}

		public bool isSample(int sample)
		{
			bool ret = yarpPINVOKE.Sound_isSample__SWIG_1(swigCPtr, sample);
			return ret;
		}

		public int getFrequency()
		{
			int ret = yarpPINVOKE.Sound_getFrequency(swigCPtr);
			return ret;
		}

		public void setFrequency(int freq)
		{
			yarpPINVOKE.Sound_setFrequency(swigCPtr, freq);
		}

		public int getBytesPerSample()
		{
			int ret = yarpPINVOKE.Sound_getBytesPerSample(swigCPtr);
			return ret;
		}

		public int getSamples()
		{
			int ret = yarpPINVOKE.Sound_getSamples(swigCPtr);
			return ret;
		}

		public int getChannels()
		{
			int ret = yarpPINVOKE.Sound_getChannels(swigCPtr);
			return ret;
		}

		public new bool write(ConnectionWriter connection)
		{
			bool ret = yarpPINVOKE.Sound_write(swigCPtr, ConnectionWriter.getCPtr(connection));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public SWIGTYPE_p_unsigned_char getRawData()
		{
			IntPtr cPtr = yarpPINVOKE.Sound_getRawData(swigCPtr);
			SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
			return ret;
		}

		public int getRawDataSize()
		{
			int ret = yarpPINVOKE.Sound_getRawDataSize(swigCPtr);
			return ret;
		}

	}
}