/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class Contactable : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal Contactable(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(Contactable obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~Contactable()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_Contactable(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public bool open()
		{
			bool ret = yarpPINVOKE.Contactable_open__SWIG_0(swigCPtr);
			return ret;
		}

		public virtual bool open(string name)
		{
			bool ret = yarpPINVOKE.Contactable_open__SWIG_1(swigCPtr, name);
			return ret;
		}

		public virtual bool open(Contact contact, bool registerName)
		{
			bool ret = yarpPINVOKE.Contactable_open__SWIG_2(swigCPtr, Contact.getCPtr(contact), registerName);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public virtual bool open(Contact contact)
		{
			bool ret = yarpPINVOKE.Contactable_open__SWIG_3(swigCPtr, Contact.getCPtr(contact));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public virtual bool addOutput(string name)
		{
			bool ret = yarpPINVOKE.Contactable_addOutput__SWIG_0(swigCPtr, name);
			return ret;
		}

		public virtual bool addOutput(string name, string carrier)
		{
			bool ret = yarpPINVOKE.Contactable_addOutput__SWIG_1(swigCPtr, name, carrier);
			return ret;
		}

		public virtual bool addOutput(Contact contact)
		{
			bool ret = yarpPINVOKE.Contactable_addOutput__SWIG_2(swigCPtr, Contact.getCPtr(contact));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public virtual void close()
		{
			yarpPINVOKE.Contactable_close(swigCPtr);
		}

		public virtual void interrupt()
		{
			yarpPINVOKE.Contactable_interrupt(swigCPtr);
		}

		public virtual Contact where()
		{
			Contact ret = new Contact(yarpPINVOKE.Contactable_where(swigCPtr), true);
			return ret;
		}

		public virtual ConstString getName()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Contactable_getName(swigCPtr), true);
			return ret;
		}

		public virtual bool setEnvelope(PortWriter envelope)
		{
			bool ret = yarpPINVOKE.Contactable_setEnvelope(swigCPtr, PortWriter.getCPtr(envelope));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public virtual bool getEnvelope(PortReader envelope)
		{
			bool ret = yarpPINVOKE.Contactable_getEnvelope(swigCPtr, PortReader.getCPtr(envelope));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public virtual int getInputCount()
		{
			int ret = yarpPINVOKE.Contactable_getInputCount(swigCPtr);
			return ret;
		}

		public virtual int getOutputCount()
		{
			int ret = yarpPINVOKE.Contactable_getOutputCount(swigCPtr);
			return ret;
		}

		public virtual void getReport(PortReport reporter)
		{
			yarpPINVOKE.Contactable_getReport(swigCPtr, PortReport.getCPtr(reporter));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public virtual void setReporter(PortReport reporter)
		{
			yarpPINVOKE.Contactable_setReporter(swigCPtr, PortReport.getCPtr(reporter));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

	}
}