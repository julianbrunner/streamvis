/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class ConnectionWriter : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal ConnectionWriter(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(ConnectionWriter obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~ConnectionWriter()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_ConnectionWriter(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public virtual void appendBlock(string data, int len)
		{
			yarpPINVOKE.ConnectionWriter_appendBlock(swigCPtr, data, len);
		}

		public virtual void appendInt(int data)
		{
			yarpPINVOKE.ConnectionWriter_appendInt(swigCPtr, data);
		}

		public virtual void appendDouble(double data)
		{
			yarpPINVOKE.ConnectionWriter_appendDouble(swigCPtr, data);
		}

		public virtual void appendString(string str, int terminate)
		{
			yarpPINVOKE.ConnectionWriter_appendString__SWIG_0(swigCPtr, str, terminate);
		}

		public virtual void appendString(string str)
		{
			yarpPINVOKE.ConnectionWriter_appendString__SWIG_1(swigCPtr, str);
		}

		public virtual void appendExternalBlock(string data, int len)
		{
			yarpPINVOKE.ConnectionWriter_appendExternalBlock(swigCPtr, data, len);
		}

		public virtual bool isTextMode()
		{
			bool ret = yarpPINVOKE.ConnectionWriter_isTextMode(swigCPtr);
			return ret;
		}

		public virtual void declareSizes(int argc, SWIGTYPE_p_int argv)
		{
			yarpPINVOKE.ConnectionWriter_declareSizes(swigCPtr, argc, SWIGTYPE_p_int.getCPtr(argv));
		}

		public virtual void setReplyHandler(PortReader reader)
		{
			yarpPINVOKE.ConnectionWriter_setReplyHandler(swigCPtr, PortReader.getCPtr(reader));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public virtual void setReference(Portable obj)
		{
			yarpPINVOKE.ConnectionWriter_setReference(swigCPtr, Portable.getCPtr(obj));
		}

		public virtual bool convertTextMode()
		{
			bool ret = yarpPINVOKE.ConnectionWriter_convertTextMode(swigCPtr);
			return ret;
		}

		public virtual bool isValid()
		{
			bool ret = yarpPINVOKE.ConnectionWriter_isValid(swigCPtr);
			return ret;
		}

		public virtual bool isActive()
		{
			bool ret = yarpPINVOKE.ConnectionWriter_isActive(swigCPtr);
			return ret;
		}

		public virtual bool isError()
		{
			bool ret = yarpPINVOKE.ConnectionWriter_isError(swigCPtr);
			return ret;
		}

	}
}