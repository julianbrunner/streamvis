/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class Time : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal Time(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(Time obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~Time()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_Time(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public static void delay(double seconds)
		{
			yarpPINVOKE.Time_delay(seconds);
		}

		public static double now()
		{
			double ret = yarpPINVOKE.Time_now();
			return ret;
		}

		public static void yield()
		{
			yarpPINVOKE.Time_yield();
		}

		public static void turboBoost()
		{
			yarpPINVOKE.Time_turboBoost();
		}

		public Time()
			: this(yarpPINVOKE.new_Time(), true)
		{
		}

	}
}