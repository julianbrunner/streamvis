/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class IPidControl : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal IPidControl(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(IPidControl obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~IPidControl()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_IPidControl(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public virtual bool setPids(SWIGTYPE_p_Pid pids)
		{
			bool ret = yarpPINVOKE.IPidControl_setPids__SWIG_0(swigCPtr, SWIGTYPE_p_Pid.getCPtr(pids));
			return ret;
		}

		public virtual bool setReference(int j, double arg1)
		{
			bool ret = yarpPINVOKE.IPidControl_setReference(swigCPtr, j, arg1);
			return ret;
		}

		public virtual bool setReferences(SWIGTYPE_p_double refs)
		{
			bool ret = yarpPINVOKE.IPidControl_setReferences__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(refs));
			return ret;
		}

		public virtual bool setErrorLimit(int j, double limit)
		{
			bool ret = yarpPINVOKE.IPidControl_setErrorLimit(swigCPtr, j, limit);
			return ret;
		}

		public virtual bool setErrorLimits(SWIGTYPE_p_double limits)
		{
			bool ret = yarpPINVOKE.IPidControl_setErrorLimits__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(limits));
			return ret;
		}

		public virtual bool getError(int j, SWIGTYPE_p_double err)
		{
			bool ret = yarpPINVOKE.IPidControl_getError__SWIG_0(swigCPtr, j, SWIGTYPE_p_double.getCPtr(err));
			return ret;
		}

		public virtual bool getErrors(SWIGTYPE_p_double errs)
		{
			bool ret = yarpPINVOKE.IPidControl_getErrors__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(errs));
			return ret;
		}

		public virtual bool getOutput(int j, SWIGTYPE_p_double arg1)
		{
			bool ret = yarpPINVOKE.IPidControl_getOutput__SWIG_0(swigCPtr, j, SWIGTYPE_p_double.getCPtr(arg1));
			return ret;
		}

		public virtual bool getOutputs(SWIGTYPE_p_double outs)
		{
			bool ret = yarpPINVOKE.IPidControl_getOutputs__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(outs));
			return ret;
		}

		public virtual bool getPids(SWIGTYPE_p_Pid pids)
		{
			bool ret = yarpPINVOKE.IPidControl_getPids__SWIG_0(swigCPtr, SWIGTYPE_p_Pid.getCPtr(pids));
			return ret;
		}

		public virtual bool getReference(int j, SWIGTYPE_p_double arg1)
		{
			bool ret = yarpPINVOKE.IPidControl_getReference__SWIG_0(swigCPtr, j, SWIGTYPE_p_double.getCPtr(arg1));
			return ret;
		}

		public virtual bool getReferences(SWIGTYPE_p_double refs)
		{
			bool ret = yarpPINVOKE.IPidControl_getReferences__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(refs));
			return ret;
		}

		public virtual bool getErrorLimit(int j, SWIGTYPE_p_double limit)
		{
			bool ret = yarpPINVOKE.IPidControl_getErrorLimit__SWIG_0(swigCPtr, j, SWIGTYPE_p_double.getCPtr(limit));
			return ret;
		}

		public virtual bool getErrorLimits(SWIGTYPE_p_double limits)
		{
			bool ret = yarpPINVOKE.IPidControl_getErrorLimits__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(limits));
			return ret;
		}

		public virtual bool resetPid(int j)
		{
			bool ret = yarpPINVOKE.IPidControl_resetPid(swigCPtr, j);
			return ret;
		}

		public virtual bool disablePid(int j)
		{
			bool ret = yarpPINVOKE.IPidControl_disablePid(swigCPtr, j);
			return ret;
		}

		public virtual bool enablePid(int j)
		{
			bool ret = yarpPINVOKE.IPidControl_enablePid(swigCPtr, j);
			return ret;
		}

		public virtual bool setOffset(int j, double v)
		{
			bool ret = yarpPINVOKE.IPidControl_setOffset(swigCPtr, j, v);
			return ret;
		}

		public bool setReferences(DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_setReferences__SWIG_1(swigCPtr, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getReference(int j, DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_getReference__SWIG_1(swigCPtr, j, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getReferences(DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_getReferences__SWIG_1(swigCPtr, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool setErrorLimits(DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_setErrorLimits__SWIG_1(swigCPtr, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getErrorLimit(int j, DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_getErrorLimit__SWIG_1(swigCPtr, j, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getErrorLimits(DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_getErrorLimits__SWIG_1(swigCPtr, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getError(int j, DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_getError__SWIG_1(swigCPtr, j, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getErrors(DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_getErrors__SWIG_1(swigCPtr, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getOutput(int j, DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_getOutput__SWIG_1(swigCPtr, j, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getOutputs(DVector data)
		{
			bool ret = yarpPINVOKE.IPidControl_getOutputs__SWIG_1(swigCPtr, DVector.getCPtr(data));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool setPid(int j, Pid pid)
		{
			bool ret = yarpPINVOKE.IPidControl_setPid(swigCPtr, j, Pid.getCPtr(pid));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool setPids(PidVector pids)
		{
			bool ret = yarpPINVOKE.IPidControl_setPids__SWIG_1(swigCPtr, PidVector.getCPtr(pids));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getPid(int j, PidVector pid)
		{
			bool ret = yarpPINVOKE.IPidControl_getPid(swigCPtr, j, PidVector.getCPtr(pid));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public bool getPids(PidVector pids)
		{
			bool ret = yarpPINVOKE.IPidControl_getPids__SWIG_1(swigCPtr, PidVector.getCPtr(pids));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

	}
}