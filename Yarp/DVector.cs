/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class DVector : IDisposable, System.Collections.IEnumerable
#if !SWIG_DOTNET_1
, System.Collections.Generic.IEnumerable<double>
#endif
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal DVector(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(DVector obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~DVector()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_DVector(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public DVector(System.Collections.ICollection c)
			: this()
		{
			if (c == null)
				throw new ArgumentNullException("c");
			foreach (double element in c)
			{
				this.Add(element);
			}
		}

		public bool IsFixedSize
		{
			get
			{
				return false;
			}
		}

		public bool IsReadOnly
		{
			get
			{
				return false;
			}
		}

		public double this[int index]
		{
			get
			{
				return getitem(index);
			}
			set
			{
				setitem(index, value);
			}
		}

		public int Capacity
		{
			get
			{
				return (int)capacity();
			}
			set
			{
				if (value < size())
					throw new ArgumentOutOfRangeException("Capacity");
				reserve((uint)value);
			}
		}

		public int Count
		{
			get
			{
				return (int)size();
			}
		}

		public bool IsSynchronized
		{
			get
			{
				return false;
			}
		}

#if SWIG_DOTNET_1
  public void CopyTo(System.Array array)
#else
		public void CopyTo(double[] array)
#endif
		{
			CopyTo(0, array, 0, this.Count);
		}

#if SWIG_DOTNET_1
  public void CopyTo(System.Array array, int arrayIndex)
#else
		public void CopyTo(double[] array, int arrayIndex)
#endif
		{
			CopyTo(0, array, arrayIndex, this.Count);
		}

#if SWIG_DOTNET_1
  public void CopyTo(int index, System.Array array, int arrayIndex, int count)
#else
		public void CopyTo(int index, double[] array, int arrayIndex, int count)
#endif
		{
			if (array == null)
				throw new ArgumentNullException("array");
			if (index < 0)
				throw new ArgumentOutOfRangeException("index", "Value is less than zero");
			if (arrayIndex < 0)
				throw new ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
			if (count < 0)
				throw new ArgumentOutOfRangeException("count", "Value is less than zero");
			if (array.Rank > 1)
				throw new ArgumentException("Multi dimensional array.", "array");
			if (index + count > this.Count || arrayIndex + count > array.Length)
				throw new ArgumentException("Number of elements to copy is too large.");
			for (int i = 0; i < count; i++)
				array.SetValue(getitemcopy(index + i), arrayIndex + i);
		}

#if !SWIG_DOTNET_1
		System.Collections.Generic.IEnumerator<double> System.Collections.Generic.IEnumerable<double>.GetEnumerator()
		{
			return new DVectorEnumerator(this);
		}
#endif

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return new DVectorEnumerator(this);
		}

		public DVectorEnumerator GetEnumerator()
		{
			return new DVectorEnumerator(this);
		}

		// Type-safe enumerator
		/// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
		/// whenever the collection is modified. This has been done for changes in the size of the
		/// collection but not when one of the elements of the collection is modified as it is a bit
		/// tricky to detect unmanaged code that modifies the collection under our feet.
		public sealed class DVectorEnumerator : System.Collections.IEnumerator
#if !SWIG_DOTNET_1
, System.Collections.Generic.IEnumerator<double>
#endif
		{
			private DVector collectionRef;
			private int currentIndex;
			private object currentObject;
			private int currentSize;

			public DVectorEnumerator(DVector collection)
			{
				collectionRef = collection;
				currentIndex = -1;
				currentObject = null;
				currentSize = collectionRef.Count;
			}

			// Type-safe iterator Current
			public double Current
			{
				get
				{
					if (currentIndex == -1)
						throw new InvalidOperationException("Enumeration not started.");
					if (currentIndex > currentSize - 1)
						throw new InvalidOperationException("Enumeration finished.");
					if (currentObject == null)
						throw new InvalidOperationException("Collection modified.");
					return (double)currentObject;
				}
			}

			// Type-unsafe IEnumerator.Current
			object System.Collections.IEnumerator.Current
			{
				get
				{
					return Current;
				}
			}

			public bool MoveNext()
			{
				int size = collectionRef.Count;
				bool moveOkay = (currentIndex + 1 < size) && (size == currentSize);
				if (moveOkay)
				{
					currentIndex++;
					currentObject = collectionRef[currentIndex];
				}
				else
				{
					currentObject = null;
				}
				return moveOkay;
			}

			public void Reset()
			{
				currentIndex = -1;
				currentObject = null;
				if (collectionRef.Count != currentSize)
				{
					throw new InvalidOperationException("Collection modified.");
				}
			}

#if !SWIG_DOTNET_1
			public void Dispose()
			{
				currentIndex = -1;
				currentObject = null;
			}
#endif
		}

		public void Clear()
		{
			yarpPINVOKE.DVector_Clear(swigCPtr);
		}

		public void Add(double x)
		{
			yarpPINVOKE.DVector_Add(swigCPtr, x);
		}

		private uint size()
		{
			uint ret = yarpPINVOKE.DVector_size(swigCPtr);
			return ret;
		}

		private uint capacity()
		{
			uint ret = yarpPINVOKE.DVector_capacity(swigCPtr);
			return ret;
		}

		private void reserve(uint n)
		{
			yarpPINVOKE.DVector_reserve(swigCPtr, n);
		}

		public DVector()
			: this(yarpPINVOKE.new_DVector__SWIG_0(), true)
		{
		}

		public DVector(int capacity)
			: this(yarpPINVOKE.new_DVector__SWIG_1(capacity), true)
		{
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		private double getitemcopy(int index)
		{
			double ret = yarpPINVOKE.DVector_getitemcopy(swigCPtr, index);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		private double getitem(int index)
		{
			double ret = yarpPINVOKE.DVector_getitem(swigCPtr, index);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		private void setitem(int index, double val)
		{
			yarpPINVOKE.DVector_setitem(swigCPtr, index, val);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public void AddRange(DVector values)
		{
			yarpPINVOKE.DVector_AddRange(swigCPtr, DVector.getCPtr(values));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public DVector GetRange(int index, int count)
		{
			IntPtr cPtr = yarpPINVOKE.DVector_GetRange(swigCPtr, index, count);
			DVector ret = (cPtr == IntPtr.Zero) ? null : new DVector(cPtr, true);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public void Insert(int index, double x)
		{
			yarpPINVOKE.DVector_Insert(swigCPtr, index, x);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public void InsertRange(int index, DVector values)
		{
			yarpPINVOKE.DVector_InsertRange(swigCPtr, index, DVector.getCPtr(values));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public void RemoveAt(int index)
		{
			yarpPINVOKE.DVector_RemoveAt(swigCPtr, index);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public void RemoveRange(int index, int count)
		{
			yarpPINVOKE.DVector_RemoveRange(swigCPtr, index, count);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public static DVector Repeat(double value, int count)
		{
			IntPtr cPtr = yarpPINVOKE.DVector_Repeat(value, count);
			DVector ret = (cPtr == IntPtr.Zero) ? null : new DVector(cPtr, true);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public void Reverse()
		{
			yarpPINVOKE.DVector_Reverse__SWIG_0(swigCPtr);
		}

		public void Reverse(int index, int count)
		{
			yarpPINVOKE.DVector_Reverse__SWIG_1(swigCPtr, index, count);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public void SetRange(int index, DVector values)
		{
			yarpPINVOKE.DVector_SetRange(swigCPtr, index, DVector.getCPtr(values));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public bool Contains(double value)
		{
			bool ret = yarpPINVOKE.DVector_Contains(swigCPtr, value);
			return ret;
		}

		public int IndexOf(double value)
		{
			int ret = yarpPINVOKE.DVector_IndexOf(swigCPtr, value);
			return ret;
		}

		public int LastIndexOf(double value)
		{
			int ret = yarpPINVOKE.DVector_LastIndexOf(swigCPtr, value);
			return ret;
		}

		public bool Remove(double value)
		{
			bool ret = yarpPINVOKE.DVector_Remove(swigCPtr, value);
			return ret;
		}

	}
}