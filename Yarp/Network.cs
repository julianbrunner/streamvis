/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class Network : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal Network(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(Network obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~Network()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_Network(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public Network()
			: this(yarpPINVOKE.new_Network(), true)
		{
		}

		public static bool connect(string src, string dest, string carrier, bool quiet)
		{
			bool ret = yarpPINVOKE.Network_connect__SWIG_0(src, dest, carrier, quiet);
			return ret;
		}

		public static bool connect(string src, string dest, string carrier)
		{
			bool ret = yarpPINVOKE.Network_connect__SWIG_1(src, dest, carrier);
			return ret;
		}

		public static bool connect(string src, string dest)
		{
			bool ret = yarpPINVOKE.Network_connect__SWIG_2(src, dest);
			return ret;
		}

		public static bool disconnect(string src, string dest, bool quiet)
		{
			bool ret = yarpPINVOKE.Network_disconnect__SWIG_0(src, dest, quiet);
			return ret;
		}

		public static bool disconnect(string src, string dest)
		{
			bool ret = yarpPINVOKE.Network_disconnect__SWIG_1(src, dest);
			return ret;
		}

		public static bool isConnected(string src, string dest, bool quiet)
		{
			bool ret = yarpPINVOKE.Network_isConnected__SWIG_0(src, dest, quiet);
			return ret;
		}

		public static bool isConnected(string src, string dest)
		{
			bool ret = yarpPINVOKE.Network_isConnected__SWIG_1(src, dest);
			return ret;
		}

		public static bool sync(string port, bool quiet)
		{
			bool ret = yarpPINVOKE.Network_sync__SWIG_0(port, quiet);
			return ret;
		}

		public static bool sync(string port)
		{
			bool ret = yarpPINVOKE.Network_sync__SWIG_1(port);
			return ret;
		}

		public static int main(int argc, SWIGTYPE_p_p_char argv)
		{
			int ret = yarpPINVOKE.Network_main(argc, SWIGTYPE_p_p_char.getCPtr(argv));
			return ret;
		}

		public static void init()
		{
			yarpPINVOKE.Network_init();
		}

		public static void fini()
		{
			yarpPINVOKE.Network_fini();
		}

		public static void assertion(bool shouldBeTrue)
		{
			yarpPINVOKE.Network_assertion(shouldBeTrue);
		}

		public static Contact queryName(string name)
		{
			Contact ret = new Contact(yarpPINVOKE.Network_queryName(name), true);
			return ret;
		}

		public static Contact registerName(string name)
		{
			Contact ret = new Contact(yarpPINVOKE.Network_registerName(name), true);
			return ret;
		}

		public static Contact registerContact(Contact contact)
		{
			Contact ret = new Contact(yarpPINVOKE.Network_registerContact(Contact.getCPtr(contact)), true);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public static Contact unregisterName(string name)
		{
			Contact ret = new Contact(yarpPINVOKE.Network_unregisterName(name), true);
			return ret;
		}

		public static Contact unregisterContact(Contact contact)
		{
			Contact ret = new Contact(yarpPINVOKE.Network_unregisterContact(Contact.getCPtr(contact)), true);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public static bool setProperty(string name, string key, Value value)
		{
			bool ret = yarpPINVOKE.Network_setProperty(name, key, Value.getCPtr(value));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public static Value getProperty(string name, string key)
		{
			IntPtr cPtr = yarpPINVOKE.Network_getProperty(name, key);
			Value ret = (cPtr == IntPtr.Zero) ? null : new Value(cPtr, false);
			return ret;
		}

		public static ConstString getNameServerName()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Network_getNameServerName(), true);
			return ret;
		}

		public static bool setLocalMode(bool flag)
		{
			bool ret = yarpPINVOKE.Network_setLocalMode(flag);
			return ret;
		}

		public static ConstString readString(SWIGTYPE_p_bool eof)
		{
			ConstString ret = new ConstString(yarpPINVOKE.Network_readString__SWIG_0(SWIGTYPE_p_bool.getCPtr(eof)), true);
			return ret;
		}

		public static ConstString readString()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Network_readString__SWIG_1(), true);
			return ret;
		}

		public new static bool write(Contact contact, PortWriter cmd, PortReader reply, bool admin)
		{
			bool ret = yarpPINVOKE.Network_write__SWIG_0(Contact.getCPtr(contact), PortWriter.getCPtr(cmd), PortReader.getCPtr(reply), admin);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public new static bool write(Contact contact, PortWriter cmd, PortReader reply)
		{
			bool ret = yarpPINVOKE.Network_write__SWIG_1(Contact.getCPtr(contact), PortWriter.getCPtr(cmd), PortReader.getCPtr(reply));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public new static bool write(string port_name, PortWriter cmd, PortReader reply)
		{
			bool ret = yarpPINVOKE.Network_write__SWIG_2(port_name, PortWriter.getCPtr(cmd), PortReader.getCPtr(reply));
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public static bool checkNetwork()
		{
			bool ret = yarpPINVOKE.Network_checkNetwork();
			return ret;
		}

	}
}