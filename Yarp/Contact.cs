/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Yarp
{
	public class Contact : IDisposable
	{
		private HandleRef swigCPtr;
		protected bool swigCMemOwn;

		internal Contact(IntPtr cPtr, bool cMemoryOwn)
		{
			swigCMemOwn = cMemoryOwn;
			swigCPtr = new HandleRef(this, cPtr);
		}

		internal static HandleRef getCPtr(Contact obj)
		{
			return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
		}

		~Contact()
		{
			Dispose();
		}

		public virtual void Dispose()
		{
			lock (this)
			{
				if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
				{
					swigCMemOwn = false;
					yarpPINVOKE.delete_Contact(swigCPtr);
				}
				swigCPtr = new HandleRef(null, IntPtr.Zero);
				GC.SuppressFinalize(this);
			}
		}

		public static Contact empty()
		{
			Contact ret = new Contact(yarpPINVOKE.Contact_empty(), true);
			return ret;
		}

		public static Contact invalid()
		{
			Contact ret = new Contact(yarpPINVOKE.Contact_invalid(), true);
			return ret;
		}

		public static Contact byName(string name)
		{
			Contact ret = new Contact(yarpPINVOKE.Contact_byName(name), true);
			return ret;
		}

		public static Contact byCarrier(string carrier)
		{
			Contact ret = new Contact(yarpPINVOKE.Contact_byCarrier(carrier), true);
			return ret;
		}

		public static Contact byConfig(SWIGTYPE_p_Searchable config)
		{
			Contact ret = new Contact(yarpPINVOKE.Contact_byConfig(SWIGTYPE_p_Searchable.getCPtr(config)), true);
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
			return ret;
		}

		public Contact addCarrier(string carrier)
		{
			Contact ret = new Contact(yarpPINVOKE.Contact_addCarrier(swigCPtr, carrier), true);
			return ret;
		}

		public static Contact bySocket(string carrier, string host, int portNumber)
		{
			Contact ret = new Contact(yarpPINVOKE.Contact_bySocket(carrier, host, portNumber), true);
			return ret;
		}

		public Contact addSocket(string carrier, string host, int portNumber)
		{
			Contact ret = new Contact(yarpPINVOKE.Contact_addSocket(swigCPtr, carrier, host, portNumber), true);
			return ret;
		}

		public Contact(Contact alt)
			: this(yarpPINVOKE.new_Contact__SWIG_0(Contact.getCPtr(alt)), true)
		{
			if (yarpPINVOKE.SWIGPendingException.Pending) throw yarpPINVOKE.SWIGPendingException.Retrieve();
		}

		public ConstString getName()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Contact_getName(swigCPtr), true);
			return ret;
		}

		public ConstString getHost()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Contact_getHost(swigCPtr), true);
			return ret;
		}

		public ConstString getCarrier()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Contact_getCarrier(swigCPtr), true);
			return ret;
		}

		public int getPort()
		{
			int ret = yarpPINVOKE.Contact_getPort(swigCPtr);
			return ret;
		}

		public new ConstString toString_c()
		{
			ConstString ret = new ConstString(yarpPINVOKE.Contact_toString_c(swigCPtr), true);
			return ret;
		}

		public bool isValid()
		{
			bool ret = yarpPINVOKE.Contact_isValid(swigCPtr);
			return ret;
		}

		public Contact()
			: this(yarpPINVOKE.new_Contact__SWIG_1(), true)
		{
		}

	}
}